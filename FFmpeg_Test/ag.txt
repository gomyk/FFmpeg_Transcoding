///> Include FFMpeg

#define _CRT_SECURE_NO_DEPRECATE
#pragma warning(disable:4996)

extern "C" {
#ifdef __cplusplus
#define __STDC_CONSTANT_MACROS
#ifdef _STDINT_H
#undef _STDINT_H
#endif
#include <libavformat/avformat.h>
#include <libavutil/opt.h>
#include <libavutil/imgutils.h>
#include <libswscale/swscale.h>

#endif
}

#include <iostream>
#include <windows.h>

using namespace std;
///> Library Link On Windows System
#pragma comment( lib, "avformat.lib" )	
#pragma comment( lib, "avutil.lib" )
#pragma comment( lib, "avcodec.lib" )
#pragma comment( lib, "swscale")


static void write_ascii_frame(const char *szFileName, const AVFrame *pVframe);

int main(void)
{
	DWORD start = GetTickCount();
	DWORD finished;
	AVCodecID codec_id = AV_CODEC_ID_MPEG1VIDEO;
	const char *szFilePath = "sample2.mp4";
	uint8_t endcode[] = { 0, 0, 1, 0xb7 };
	///> Initialize libavformat and register all the muxers, demuxers and protocols.
	av_register_all();
	FILE *f;
	///> Do global initialization of network components.
	avformat_network_init();

	int ret;
	AVFormatContext *pFmtCtx = NULL;

	///> Open an input stream and read the header. 
	ret = avformat_open_input(&pFmtCtx, szFilePath, NULL, NULL);
	
	if (ret != 0) {
		av_log(NULL, AV_LOG_ERROR, "File [%s] Open Fail (ret: %d)\n", ret);
		exit(-1);
	}
	av_log(NULL, AV_LOG_INFO, "File [%s] Open Success\n", szFilePath);
	av_log(NULL, AV_LOG_INFO, "Format: %s\n", pFmtCtx->iformat->name);

	///> Read packets of a media file to get stream information. 
	ret = avformat_find_stream_info(pFmtCtx, NULL);
	if (ret < 0) {
		av_log(NULL, AV_LOG_ERROR, "Fail to get Stream Information\n");
		exit(-1);
	}
	av_log(NULL, AV_LOG_INFO, "Get Stream Information Success\n");

	///> Find Video Stream
	int nVSI = -1;
	int nASI = -1;
	int i;
	for (i = 0; i < pFmtCtx->nb_streams; i++) {
		if (nVSI < 0 && pFmtCtx->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO) {
			nVSI = i;
		}
		else if (nASI < 0 && pFmtCtx->streams[i]->codec->codec_type == AVMEDIA_TYPE_AUDIO) {
			nASI = i;
		}
	}

	if (nVSI < 0 && nASI < 0) {
		av_log(NULL, AV_LOG_ERROR, "No Video & Audio Streams were Found\n");
		exit(-1);
	}

	///> Find Video Decoder
	AVCodec *pVideoCodec = avcodec_find_decoder(pFmtCtx->streams[nVSI]->codec->codec_id);
	if (pVideoCodec == NULL) {
		av_log(NULL, AV_LOG_ERROR, "No Video Decoder was Found\n");
		exit(-1);
	}

	///> Initialize Codec Context as Decoder
	if (avcodec_open2(pFmtCtx->streams[nVSI]->codec, pVideoCodec, NULL) < 0) {
		av_log(NULL, AV_LOG_ERROR, "Fail to Initialize Decoder\n");
		exit(-1);
	}

	///> Find Audio Decoder
	AVCodec *pAudioCodec = avcodec_find_decoder(pFmtCtx->streams[nASI]->codec->codec_id);
	if (pAudioCodec == NULL) {
		av_log(NULL, AV_LOG_ERROR, "No Audio Decoder was Found\n");
		exit(-1);
	}

	///> Initialize Codec Context as Decoder
	if (avcodec_open2(pFmtCtx->streams[nASI]->codec, pAudioCodec, NULL) < 0) {
		av_log(NULL, AV_LOG_ERROR, "Fail to Initialize Decoder\n");
		exit(-1);
	}

	AVCodecContext *pVCtx = pFmtCtx->streams[nVSI]->codec;
	AVCodecContext *pACtx = pFmtCtx->streams[nASI]->codec;

	AVPacket pkt, outpkt;
	AVFrame* pVFrame, *pAFrame;
	int bGotPicture = 0;	// flag for video decoding
	int bGotSound = 0;		// flag for audio decoding

	int bPrint = 0;	// 비디오 첫 장면만 파일로 남기기 위한 임시 flag 입니다

	pVFrame = av_frame_alloc();
	pAFrame = av_frame_alloc();
	AVCodec *codec;
	AVCodec *Acodec;
	AVCodecContext *c = NULL;
	AVCodecContext *ac = NULL;
	Acodec = avcodec_find_encoder(AV_CODEC_ID_MP2);
	codec = avcodec_find_encoder(codec_id);
	if (!codec) {
		fprintf(stderr, "Codec not found\n");
		exit(1);
	}
	ac = avcodec_alloc_context3(Acodec);
	c = avcodec_alloc_context3(codec);
	if (!c) {
		fprintf(stderr, "Could not allocate video codec context\n");
		exit(1);
	}
	struct SwsContext *resize;
	resize = sws_getContext(640, 358, AV_PIX_FMT_YUV420P, 640 * 2, 358 * 2, AV_PIX_FMT_YUV420P, SWS_BICUBIC, NULL, NULL, NULL);
	/* put sample parameters */
	c->bit_rate = 400000;
	/* resolution must be a multiple of two */
	c->width = 640;
	c->height = 358;
	/* frames per second */
	c->time_base.num = 1;
	c->time_base.den = 25;
	c->gop_size = 10; /* emit one intra frame every ten frames */
	c->max_b_frames = 1;
	c->pix_fmt = AV_PIX_FMT_YUV420P;
	
	if (codec_id == AV_CODEC_ID_H264)
		av_opt_set(c->priv_data, "preset", "slow", 0);
	/* open it */
	if (avcodec_open2(c, codec, NULL) < 0) {
		fprintf(stderr, "Could not open codec\n");
		exit(1);
	}
	f = fopen("output.mkv", "wb");
	if (!f) {
		fprintf(stderr, "Could not open %s\n", "output.mpg");
		exit(1);
	}
	AVFrame *frame;

	frame = av_frame_alloc();
	av_image_alloc(frame->data, frame->linesize, c->width, c->height,
		c->pix_fmt, 32);
	int num_bytes = avpicture_get_size(AV_PIX_FMT_RGB24, 640 * 2, 358 * 2);
	uint8_t* frame2_buffer = (uint8_t *)av_malloc(num_bytes * sizeof(uint8_t));
	avpicture_fill((AVPicture*)frame, frame2_buffer, AV_PIX_FMT_RGB24, 640 * 2, 358 * 2);
	
	i = 0;
	while (av_read_frame(pFmtCtx, &pkt) >= 0) {
		///> Decoding
		if (pkt.stream_index == nVSI) {
			if (avcodec_decode_video2(pVCtx, pVFrame, &bGotPicture, &pkt) >= 0) {
				if (bGotPicture) {
					///> Ready to Render Image
					//av_log(NULL, AV_LOG_INFO, "Got Picture\n");
					fflush(stdout);
					pVFrame->pts = i;
					av_init_packet(&outpkt);
					outpkt.data = NULL;    // packet data will be allocated by the encoder
					outpkt.size = 0;
				//	sws_scale(resize, pVFrame->data, pVFrame->linesize, 0, 358, frame->data, frame->linesize);
					ret = avcodec_encode_video2(c, &outpkt, pVFrame, &bGotPicture);
					if (bGotPicture) {
						printf("Write frame %3d (size=%5d)\n", i, outpkt.size);
						fwrite(outpkt.data, 1, outpkt.size, f);
						av_free_packet(&outpkt);
					}
				}
			}
		}
		else if (pkt.stream_index == nASI) {
			if (avcodec_decode_audio4(pACtx, pAFrame, &bGotSound, &pkt) >= 0) {
				if (bGotSound) {
					
				}
			}
			// else ( < 0 ) : Decoding Error
		}
		i++;
		///> Free the packet that was allocated by av_read_frame
		av_free_packet(&pkt);
	}
	for (bGotPicture = 1; bGotPicture; i++) {
		fflush(stdout);
		ret = avcodec_encode_video2(c, &pkt, NULL, &bGotPicture);
		if (ret < 0) {
			fprintf(stderr, "Error encoding frame\n");
			exit(1);
		}
		if (bGotPicture) {
			printf("Write frame %3d (size=%5d)\n", i, pkt.size);
			//fwrite(pkt.data, 1, pkt.size, f);
			av_free_packet(&pkt);
		}
	}

	/* add sequence end code to have a real mpeg file */
	fwrite(endcode, 1, sizeof(endcode), f);
	fclose(f);
	avcodec_close(c);
	av_free(c);
	av_free(pVFrame);
	av_free(pAFrame);

	///> Close an opened input AVFormatContext. 
	avformat_close_input(&pFmtCtx);

	///> Undo the initialization done by avformat_network_init.
	avformat_network_deinit();
	finished = GetTickCount();
	cout << finished - start << endl;
	return 0;
}

static void write_ascii_frame(const char *szFileName, const AVFrame *frame)
{
	int x, y;
	uint8_t *p0, *p;
	const char arrAsciis[] = "m.-+#";

	FILE* fp = fopen(szFileName, "w");
	if (fp) {
		/* Trivial ASCII grayscale display. */
		p0 = frame->data[0];
		for (y = 0; y < frame->height; y++) {
			p = p0;
			for (x = 0; x < frame->width; x++)
				putc(arrAsciis[*(p++) / 52], fp);
			putc('\n', fp);
			p0 += frame->linesize[0];
		}
		fflush(fp);
		fclose(fp);
	}
}